!<arch>
0-isupper.c/    0           0     0     644     308       `
#include "holberton.h"

/**
*_isupper - Checks for uppercase
*@c: arbitrary character entered by user
*
*Description: This program will determine if a character is uppercase
*Return: 1 if uppercase, 0 otherwise
*/

int _isupper(int c)
{
	if ((c >= 'A') && (c <= 'Z'))
	{
	return (1);
	}
	else
	return (0);
}
0-memset.c/     0           0     0     644     468       `
#include "holberton.h"

/**
 * _memset - Fills the first @n bytes of the memory area
 *          pointed to by @s with the constant byte @c.
 * @s: A pointer to the memory area to be filled.
 * @b: The character to fill the memory area with.
 * @n: The number of bytes to be filled.
 *
 * Return: A pointer to the filled memory area @s.
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
		s[i] = b;
		i++;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     323       `
#include "holberton.h"
/**
 * *_strcat - concatenates two strings
 * @dest: pointer destination
 * @src: pointer source
 * Return: void
 */

char *_strcat(char *dest, char *src)
{
	int a = -1, i;

	for (i = 0; dest[i] != '\0'; i++)
		;

	do {
		a++;
		dest[i] = src[a];
		i++;
	} while (src[a] != '\0');

	return (dest);
}

100-atoi.c/     0           0     0     644     425       `
#include "holberton.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to convert
 *
 * Return: value of integer
 */
int _atoi(char *s)
{
	int i, j, n, m;

	i = n = 0;
	m = 1;
	while ((*(s + i) < '0' || *(s + i) > '9') && (*(s + i) != '\0'))
	{
		if (*(s + i) == '-')
			m *= -1;
		i++;
	}
	j = i;
	while ((*(s + j) >= '0') && (*(s + j) <= '9'))
	{
		n = n * 10 + m * (*(s + j) - '0');
		j++;
	}
	return (n);
}

1-isdigit.c/    0           0     0     644     209       `
#include "holberton.h"

/**
* _isdigit - Entry point
*@c: charater to check
* Return: if is digit  or not, return 1 else 0
*/
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	return (1);
	else
	return (0);
}

1-memcpy.c/     0           0     0     644     312       `
#include "holberton.h"

/**
 * *_memcpy -  copies memory area from src to dest
 * @dest: destination
 * @src: source
 * @n: max bytes to use
 * Return: dest
 */


char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; n > 0 ; i++, n--)
	{
		dest[i] = src[i];
	}

	return (dest);
}
1-strncat.c/    0           0     0     644     427       `
#include "holberton.h"

/**
* _strncat- Copy str to dest
* @n: Number of bytes to use max
* @dest: String to copied to
* @src: String to be copied to dest
* Return: Always 0.
*/

char *_strncat(char *dest, char *src, int n)
{
	char *origin = dest;
	int counter = 0;

	while (*dest != '\0')
		dest++;

	while (counter < n && *src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
		counter++;
	}
	*dest = '\0';
	return (origin);
}

2-strchr.c/     0           0     0     644     291       `
#include "holberton.h"

/**
 * *_strchr - fills memory with a constant byte.
 * @s: pointer to put the constant
 * @c: constant
 * Return: s
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'  ; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}

	return ('\0');
}

2-strlen.c/     0           0     0     644     210       `
#include "holberton.h"

/**
 * _strlen - returns the length of a string
 * @s: string to find length of
 *
 * Return: length of s
 */
int _strlen(char *s)
{
	int i = 0;

	while (*(s + i))
		i++;
	return (i);
}
2-strncpy.c/    0           0     0     644     344       `
#include "holberton.h"
/**
* *_strncpy - find the length of a string
* @dest: pointer to the string
* @src: pointer
* @n: int
* Return: destination
*/

char *_strncpy(char *dest, char *src, int n)
{
	int i = 0;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
	dest[i] = src[i];
	}

	for ( ; i < n; i++)
	{
	dest[i] = '\0';
	}

	return (dest);
}
3-islower.c/    0           0     0     644     217       `
#include "holberton.h"

/**
* _islower - checks for lower case
*@c: arbitrary character
*Return: 0
*/

int _islower(int c)
/*@c: arbitrary character*/

{
	if (c >= 'a' && c <= 'z')

	return (1);

	else
	return (0);
}

3-puts.c/       0           0     0     644     218       `
#include "holberton.h"
/**
* _puts - prints a string in stdout
* @str: string to print
*
* Return: void
*/
void _puts(char *str)
{
	int i = 0;

	while (*(str + i))
	{
	_putchar(*(str + i));
	i++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     494       `
#include "holberton.h"

/**
 * _strcmp - Compares pointers to two strings.
 * @s1: A pointer to the first string to be compared.
 * @s2: A pointer to the second string to be compared.
 *
 * Return: If str1 < str2, the negative difference of the first unmatched char
 *         If str1 == str2, 0.
 *         If str1 > str2, the positive difference of the first unmatched char
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}
3-strspn.c/     0           0     0     644     430       `
#include "holberton.h"

/**
 * *_strspn - return the number of occurent of a string
 * @s: string to check
 * @accept: character to match
 * Return: int
 */


unsigned int _strspn(char *s, char *accept)
{
	int i, j, cmpt = 0;

	for (i = 0; s[i] >= '\0'; i++)
	{
		for (j = 0; accept[j] > '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				cmpt++;
				break;
			}
		}
		if (accept[j] == '\0')
		{
			break;
		}
	}
	return (cmpt);
}
4-isalpha.c/    0           0     0     644     254       `
#include "holberton.h"

/**
* _isalpha - checks lowercase and uppercase alphabets
*Return: 1 else 0
*@c: arbitrary letter
*/
int _isalpha(int c)

{
	if (c >= 'a' && c <= 'z')
	return (1);
	else if (c >= 'A' && c <= 'z')
	return (1);
	else
	return (0);
}
4-strpbrk.c/    0           0     0     644     490       `
#include "holberton.h"

/**
 * _strpbrk - Search a string for any of a set of bytes.
 * @s: string
 * @accept: string to match
 * Return: Pointer to the byte in `s` that matches one of the bytes in `accept`
 * or NULL if no such byte is found.
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j;
	char *p;

	i = 0;
	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j] != '\0')
		{
			if (accept[j] == s[i])
			{
				p = &s[i];
				return (p);
			}
			j++;
		}
		i++;
	}

	return (0);
}
5-strstr.c/     0           0     0     644     447       `
#include "holberton.h"
#include <stdio.h>
/**
 * *_strstr - description
 * @haystack: string
 * @needle: pointer
 * Return: pointer
 */


char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] > '\0'; i++)
	{
		for (j = i; haystack[j] > '\0' && needle[j - i] > '\0'; j++)
		{
			if (haystack[j] != needle[j - i])
			{
				break;
			}
		}
		if (needle[j - i] == '\0')
		{
			return (haystack + i);
		}
	}
	return (0);
}

6-abs.c/        0           0     0     644     289       `
#include "holberton.h"
/**
*_abs - Returns the absolute value of n
*@n: arbitrary integer value
*
*Description: This program will return the absolute value of a number
*Return: +n if n is positive, -n if n is negative
*/

int _abs(int n)

{
	if (n >= 0)
	return (n);
	else
	return (-n);
}

9-strcpy.c/     0           0     0     644     326       `
#include "holberton.h"
/**
 *_strcpy - Write a function that copies the string pointed to by src
 *@dest: pointer char void
 *@src: pointer char source
 *Return: dest data
 */
char *_strcpy(char *dest, char *src)
{
	int i, j = 0;

	while (src[j])
		j++;

	for (i = 0; i <= j; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}
main.c/         0           0     0     644     147       `
#include "holberton.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}

_putchar.c/     0           0     0     644     248       `

#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
